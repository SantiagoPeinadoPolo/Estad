# Librerías necesarias e imports
!pip install pandas numpy matplotlib yfinance seaborn statsmodels

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf
import seaborn as sns
import statsmodels.api as sm

# Configurar activo y benchmark
Activo = 'IDR.MC'
Benchmark = '^IBEX'

# Descargar datos
df_activo = yf.download(Activo, start="2020-01-01")
df_benchmark = yf.download(Benchmark, start="2020-01-01")

# Calcular LogReturns
df_activo['LogRet'] = np.log(df_activo['Close'] / df_activo['Close'].shift(1))
df_benchmark['LogRet'] = np.log(df_benchmark['Close'] / df_benchmark['Close'].shift(1))

# Series de rendimientos alineadas
returns = pd.concat([
    df_activo['LogRet'].rename(Activo),
    df_benchmark['LogRet'].rename(Benchmark)
], axis=1).dropna()

# Supuesto: 252 días hábiles por año
trading_days = 252

# Estadísticas descriptivas
stats_df = pd.DataFrame({
    "Estadístico": [
        "Media diaria",
        "Mediana diaria",
        "Asimetría",
        "Curtosis",
        "Media anualizada (%)",
        "Volatilidad anualizada (%)",
        "Correlación"
    ],
    Activo: [
        returns[Activo].mean(),
        returns[Activo].median(),
        returns[Activo].skew(),
        returns[Activo].kurt(),
        returns[Activo].mean() * trading_days * 100,
        returns[Activo].std() * np.sqrt(trading_days) * 100,
        returns.corr().iloc[0, 1]
    ],
    Benchmark: [
        returns[Benchmark].mean(),
        returns[Benchmark].median(),
        returns[Benchmark].skew(),
        returns[Benchmark].kurt(),
        returns[Benchmark].mean() * trading_days * 100,
        returns[Benchmark].std() * np.sqrt(trading_days) * 100,
        returns.corr().iloc[0, 1]
    ]
})

# Mostrar tabla de estadísticas
print("\nResumen Estadísticos Descriptivos Anualizados")
print(stats_df.to_string(index=False))

# Dashboard de histogramas
fig, axes = plt.subplots(2, 2, figsize=(18, 10))

sns.histplot(returns[Activo], bins=100, kde=True, color='blue', stat="density", ax=axes[0, 0])
axes[0, 0].set_title(f'Distribución de Retornos Logarítmicos - {Activo}')
axes[0, 0].set_xlabel('Retorno Logarítmico')
axes[0, 0].set_ylabel('Densidad')
axes[0, 0].grid(True)

sns.histplot(returns[Benchmark], bins=100, kde=True, color='orange', stat="density", ax=axes[0, 1])
axes[0, 1].set_title(f'Distribución de Retornos Logarítmicos - {Benchmark}')
axes[0, 1].set_xlabel('Retorno Logarítmico')
axes[0, 1].set_ylabel('Densidad')
axes[0, 1].grid(True)

# Correlación móvil
rolling_corr = returns[Activo].rolling(window=60).corr(returns[Benchmark])
axes[1, 0].plot(rolling_corr, label='Correlación Móvil (60 días)', color='green')
axes[1, 0].axhline(returns.corr().iloc[0, 1], color='red', linestyle='--', label='Correlación media')
axes[1, 0].set_title(f'Correlación Móvil entre {Activo} y {Benchmark}')
axes[1, 0].set_xlabel('Fecha')
axes[1, 0].set_ylabel('Correlación')
axes[1, 0].legend()
axes[1, 0].grid(True)

# Modelo de regresión lineal
X = sm.add_constant(returns[Benchmark])
model = sm.OLS(returns[Activo], X).fit()

# Gráfico de regresión
sns.regplot(x=Benchmark, y=Activo, data=returns, line_kws={'color': 'red'}, ax=axes[1, 1])
axes[1, 1].set_title(f'Regresión Lineal: {Activo} vs {Benchmark}\nBeta = {model.params[1]:.4f}, Alpha = {model.params[0]:.4f}')
axes[1, 1].set_xlabel(f'Rendimiento {Benchmark}')
axes[1, 1].set_ylabel(f'Rendimiento {Activo}')
axes[1, 1].grid(True)

plt.tight_layout()
plt.show()

# Mostrar resumen del modelo
print("\nResumen del modelo de regresión:")
print(model.summary())
